#ifndef STL_LIST_H
#define STL_LIST_H

#include <memory>
#include <functional>
#include <cmath>
#include <iterator>
#include <iostream>
#include <stack>

namespace std {

//implemented as circular node list with m_head a dataless start/end node

template <class T, class Allocator = allocator<T> >
class list {
  private:
    class Node_base {
      public:
        Node_base* m_next;
        Node_base* m_previous;
    };
    
    class Node : public Node_base {
      public:
        template <class... Args>
        Node(Node_base* next, Node_base* previous, Args&&... args) : Node_base{next, previous}, m_value(std::forward<Args&&>(args)...) {}
        T m_value;
    };
    
    typedef typename Allocator::template rebind<Node>::other Node_allocator_type;
    
    Node_allocator_type m_alloc;
    Node_base m_head;

    template <class U> //U is either T or const T depending on if this is a non-const or const iterator
    class list_iterator : public std::iterator<std::bidirectional_iterator_tag, U> {
        public:
            typedef size_t size_type;
            typedef ptrdiff_t difference_type;
        
            list_iterator() = default;
            list_iterator(const list_iterator<T>& x) : m_node(x.m_node) {}
            list_iterator(list_iterator<T>&& x) : m_node(std::move(x.m_node)) {}
            list_iterator<U>& operator= (const list_iterator<T>& x) { m_node = x.m_node; return *this; }
        
        private:
            friend list;
            explicit list_iterator(const Node_base* node) : m_node(const_cast<Node_base*>(node)) {} //I do feel a little dirty,
                //but formally promise not to change the el I'm pointing to if iterator is const
            Node_base* m_node;
            
        public:
            bool operator==(const list_iterator<T>& other) const {
                return m_node == other.m_node;
            }
            bool operator==(const list_iterator<const T>& other) const {
                return m_node == other.m_node;
            }
            bool operator!=(const list_iterator<T>& other) const {
                return !(*this == other);
            }
            bool operator!=(const list_iterator<const T>& other) const {
                return !(*this == other);
            }
            list_iterator<U>& operator++() {
                std::cout << "increament" << std::endl;
                m_node = m_node->m_next;
                return *this;
            }
            list_iterator<U> operator++(int) {
                list_iterator<U> current(*this);
                m_node = m_node->m_next;
                return current;
            }
            list_iterator<U>& operator--() {
                m_node = m_node->m_previous;
                return *this;
            }
            list_iterator<U> operator--(int) {
                list_iterator<U> current(*this);
                m_node = m_node->m_previous;
                return current;
            }
            U& operator* () const { return static_cast<Node*>(m_node)->m_value; }
            U* operator-> () const { return &static_cast<Node*>(m_node)->m_value; }
    };

  public:
    // types:
    typedef T value_type;
    typedef value_type& reference;
    typedef const value_type& const_reference;    
    typedef list_iterator<T> iterator;  // see 23.2
    typedef list_iterator<const T> const_iterator; // see 23.2
    typedef typename list_iterator<T>::size_type size_type; // see 23.2
    typedef typename list_iterator<T>::difference_type difference_type;// see 23.2
    typedef Allocator allocator_type;
    typedef typename allocator_traits<Allocator>::pointer pointer;
    typedef typename allocator_traits<Allocator>::const_pointer const_pointer;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

private:
    size_type m_size;

public:

// 23.3.5.2, construct/copy/destroy:
    explicit list(const Allocator& alloc = Allocator()) : m_alloc(alloc), m_size(0), m_head{&m_head, &m_head} {}
    
    explicit list(size_type n) : list(Allocator()) {
        for (size_type i = 0; i < n; ++i) 
            emplace_front();
    }
    
    list(size_type n, const T& value, const Allocator& alloc = Allocator()) : list(alloc) {
        for (size_type i = 0; i < n; ++i) 
            emplace_front(value);
    }
    
    template <class InputIterator>
    list(InputIterator first, InputIterator last, const Allocator& alloc = Allocator()) : list(alloc) {
        for (auto it = first; it != last; ++it)
            emplace_back(*it);
    }
    
    list(const list<T,Allocator>& x) : list(x.begin(), x.end(), x.get_allocator()) {}
    
    list(list&& x, const Allocator& alloc) : m_alloc(alloc), m_head(x.m_head), m_size(x.m_size) {    
        if (m_head.m_next == m_head.m_previous) { //x was actually empty
            m_head.m_next = m_head.m_previous = &m_head;
            return;
        }
        m_head.m_next->m_previous = &m_head;
        m_head.m_previous->m_next = &m_head;
        x.m_head.m_next = &x.m_head; 
        x.m_head.m_previous = &x.m_head;
        x.m_size = 0;
    }
    
    list(list&& x) : list(std::forward<list&&>(x), x.get_allocator()) {}
    
    list(const list& x, const Allocator& alloc) : list(x.begin(), x.end(), alloc) {}
    
    list(initializer_list<T> x, const Allocator& alloc = Allocator()) : list(x.begin(), x.end(), alloc) {}

    ~list() { clear(); }

    list<T,Allocator>& operator=(const list<T,Allocator>& x) {
        assign(x.begin(), x.end());
        return *this;
    }
    
    list& operator=(initializer_list<T> x) {
        assign(x.begin(), x.end());
        return *this;
    }
    
    list<T,Allocator>& operator=(list<T,Allocator>&& x) {
        clear();
        
        if (x.size() != 0) {       
            //steal the data
            m_head = x.m_head;
            x.m_head.m_previous->m_next = &m_head;
            x.m_head.m_next->m_previous = &m_head;
            m_size = x.m_size;
            
            //fix the other list to a valid state
            x.m_head.m_next = &x.m_head; 
            x.m_head.m_previous = &x.m_head; 
            x.m_size = 0;
        }
        
        return *this;
    }

    template <class InputIterator>
    void assign(InputIterator first, InputIterator last) {
        auto dest = begin();
        while (first != last && dest != end()) //copy
            *dest++ = *first++;
        if (first != last) { //append
            emplace_back(*first++);
            while (first != last)
                emplace_back(*first++);
        } else { //erase trailing data
            erase(dest, end());
        }
    }
    
    void assign(initializer_list<T> x) { assign(x.begin(), x.end()); }
    
    void assign(size_type n, const T& t) {
        auto dest = begin(); 
        size_type i;
        for (i = 0; dest != end() && i < n; ++i) //copy
            *dest++ = t;
        if (i < n) { //append
            emplace_back(t);
            ++i;
            for (; i < n; ++i)
                emplace_back(t);
        } else { //erase trailing data
            erase(dest, end());
        }
    }
    
    allocator_type get_allocator() const noexcept { return m_alloc; }
    
// iterators:
    iterator begin() noexcept { return iterator(m_head.m_next); }
    const_iterator begin() const noexcept { return const_iterator(m_head.m_next); }
    iterator end() noexcept { return iterator(&m_head); }
    const_iterator end() const noexcept { return const_iterator(&m_head); }
    reverse_iterator rbegin() noexcept { return reverse_iterator(end()); }
    const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(cend()); }
    reverse_iterator rend() noexcept { return reverse_iterator(begin()); }
    const_reverse_iterator rend() const noexcept { return const_reverse_iterator(cbegin()); }
    const_iterator cbegin() const noexcept { return const_iterator(m_head.m_next); }
    const_iterator cend() const noexcept { return const_iterator(&m_head); }
    const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(cend()); }
    const_reverse_iterator crend() const noexcept { return const_reverse_iterator(cbegin()); }

// 23.3.5.3, capacity:
    bool empty() const noexcept { return m_size == 0; }
    size_type size() const noexcept { return m_size; }
    size_type max_size() const noexcept { return size_type(-1); }
    
    void resize(size_type sz) {
        size_type size_difference = size() - sz;
        if (size_difference > 0) //shrink
            for (size_type i = 0; i < size_difference; ++i) pop_back();
        else //grow
            for (size_type i = 0; i < -size_difference; ++i) emplace_back();
    }
    
    void resize(size_type sz, const T& c) {
        size_type size_difference = size() - sz;
        if (size_difference > 0) //shrink
            for (size_type i = 0; i < size_difference; ++i) pop_back();
        else //grow
            for (size_type i = 0; i < -size_difference; ++i) emplace_back(c);
    }

// element access:
    reference front() { return *begin(); }
    const_reference front() const { return *cbegin(); }
    reference back() { return *rbegin(); }
    const_reference back() const { return *crbegin(); }
    
// 23.3.5.4, modifiers:
    template <class... Args> void emplace_front(Args&&... args) {
        Node* node = m_alloc.allocate(1, m_head.m_next);
        try {
            m_alloc.construct(node, m_head.m_next, &m_head, std::forward<Args&&>(args)...);
        } catch(...) {
            m_alloc.deallocate(node, 1);
            throw;
        }
        m_head.m_next->m_previous = node;
        m_head.m_next = node;
        ++m_size;
    }
    
    void pop_front() noexcept {
        Node* node = static_cast<Node*>(m_head.m_next);
        m_head.m_next->m_next->m_previous = &m_head;
        m_head.m_next = m_head.m_next->m_next;
        m_alloc.destroy(node);
        m_alloc.deallocate(node, 1);
        --m_size;  
    }
    
    template <class... Args> void emplace_back(Args&&... args) {
        Node* node = m_alloc.allocate(1, m_head.m_previous);
        try {
            m_alloc.construct(node, &m_head, m_head.m_previous, std::forward<Args&&>(args)...);
        } catch(...) {
            m_alloc.deallocate(node, 1);
            throw;
        }
        m_head.m_previous->m_next = node;
        m_head.m_previous = node;
        ++m_size;
    }
    
    void push_front(const T& x) { emplace_front(x); }
    void push_front(T&& x) { emplace_front(std::move(x)); }    
    void push_back(const T& x) { emplace_back(x); }
    void push_back(T&& x) { emplace_back(std::move(x)); }
    
    void pop_back() noexcept {
        Node* node = static_cast<Node*>(m_head.m_previous);
        m_head.m_previous->m_previous->m_next = &m_head;
        m_head.m_previous = m_head.m_previous->m_previous;
        m_alloc.destroy(node);
        m_alloc.deallocate(node, 1);
        --m_size;
    }
    
    template <class... Args> iterator emplace(const_iterator position, Args&&... args) {
        Node* node = m_alloc.allocate(1, position.m_node);
        try {
            m_alloc.construct(node, position.m_node->m_previous, position.m_node, std::forward<Args&&>(args)...);
        } catch(...) {
            m_alloc.deallocate(node, 1);
            throw;
        }
        position.m_node->m_previous->m_next = node;
        position.m_node->m_previous = node;
        m_size++;
        return iterator(node);
    }
    
    iterator insert(const_iterator position, const T& x) { return emplace(position, x); }
    iterator insert(const_iterator position, T&& x) { return emplace(position, std::move(x)); }
    iterator insert(const_iterator position, size_type n, const T& x) {
        for (size_type i = 0; i < n; ++i)
            position = emplace(position, x);   
    }
    
    template <class InputIterator>
    iterator insert(const_iterator position, InputIterator first, InputIterator last) {
        for (; first != last; ++first)
            position = emplace(position, *first); 
    }
      
    iterator insert(const_iterator position, initializer_list<T> il) { insert(position, il.begin(), il.end()); }
        
    iterator erase(const_iterator position) noexcept {
        position.m_node->m_previous->m_next = position.m_node->m_next;
        position.m_node->m_next->m_previous = position.m_node->m_previous;
        Node_base* next_node = position.m_node->m_next;
        m_alloc.destroy(static_cast<Node*>(position.m_node));
        m_alloc.deallocate(static_cast<Node*>(position.m_node), 1);
        --m_size;
        return iterator(next_node);          
    }
    
    iterator erase(const_iterator position, const_iterator last) noexcept {
        last.m_node->m_previous = position.m_node->m_previous;
        position.m_node->m_previous->m_next = last.m_node;
        
        while (position != last) {
            Node* node_to_destroy = static_cast<Node*>(position.m_node);
            ++position;
            m_alloc.destroy(node_to_destroy);
            m_alloc.deallocate(node_to_destroy, 1);
            --m_size;
        }
        
        return iterator(last.m_node);
    }
       
    void swap(list<T,Allocator>& x) {
        m_head.m_previous->m_next = &x.m_head;
        m_head.m_next->m_previous = &x.m_head;
        x.m_head.m_previous->m_next = &m_head;
        x.m_head.m_next->m_previous = &m_head;
        std::swap(m_size, x.m_size);
        std::swap(m_head, x.m_head);
    }
    
    void clear() noexcept { erase(begin(), end()); }

    void debug() {
        std::cout << "head: address(" << &m_head<< ") next(" << m_head.m_next << ") previous(" << m_head.m_previous << " ) size(" << m_size << ")" << std::endl;
        for (auto it = begin(); it != end(); ++it) {
            Node* node = static_cast<Node*>(it.m_node);
            std::cout << "node: value(" << node->m_value << ") address(" << node << ") next(" << node->m_next << ") previous(" << node->m_previous << " )" << std::endl;
        }
        std::cout << std::endl;
    }

// 23.3.5.5, list operations:

private:
   //splices a node before right_position but does not update the size(s) of containers
   void splice_node(const_iterator right_position, const_iterator first) {
        //simple solution: 
        
            //splice_range(right_position, first, std::next(first));

        //tiny bit more efficient solution, but measurable while sorting:
           
            first.m_node->m_next->m_previous = first.m_node->m_previous; //x: e<-------f
            first.m_node->m_previous->m_next = first.m_node->m_next;     //x: e------->f  

            first.m_node->m_previous = right_position.m_node->m_previous; //l: a<-b  d        
            first.m_node->m_next = right_position.m_node;                 //l: a  b->d
               
            right_position.m_node->m_previous->m_next = first.m_node;     //l: a->b  d 
            right_position.m_node->m_previous = first.m_node;             //l: a  b<-d
    }

   //splices a range of nodes before right_position but does not update the size(s) of containers
   void splice_range(const_iterator right_position, const_iterator first, const_iterator last) {
        --last;
        auto left_position = std::prev(right_position);

        last.m_node->m_next->m_previous = first.m_node->m_previous;//x: e<-------f
        first.m_node->m_previous->m_next = last.m_node->m_next;    //x: e------->f  
           
        left_position.m_node->m_next = first.m_node;               //l: a->b  c  d 
        right_position.m_node->m_previous = last.m_node;           //l: a  b  c<-d
        
        first.m_node->m_previous = left_position.m_node;           //l: a<-b  c  d        
        last.m_node->m_next = right_position.m_node;               //l: a  b  c->d
    }

public:
    void splice(const_iterator position, list<T,Allocator>& x, const_iterator first, const_iterator last) noexcept {  //O(1) when x == *this else O(n)
        if (&x.m_head == &m_head) { //address of the head node uniquely identifies a list
            if (first != last)
                splice_range(position, first, last);
        } else {
            size_type size = std::distance(first, last); //this makes it O(n)
            if (size == 0) return;
            splice_range(position, first, last); 
            m_size += size;
            x.m_size -= size;
        }
    }
    
    void splice(const_iterator position, list<T,Allocator>&& x, const_iterator first, const_iterator last) noexcept { splice(position, std::move(x), first, last); } //O(1) when x == *this else O(n)      

    void splice(const_iterator position, list<T,Allocator>& x) noexcept { //O(1)
        splice_range(position, x.begin(), x.end()); 
        m_size += x.m_size;

        x.m_size = 0;
    }
    
    void splice(const_iterator position, list<T,Allocator>&& x) noexcept { splice(position, std::move(x)); } //O(1)

    void splice(const_iterator position, list<T,Allocator>& x, const_iterator i) noexcept {
        if (&x.m_head == &m_head) { //address of the head node uniquely identifies a list
            splice_node(position, i);
        } else {
            splice_node(position, i);
            ++m_size;
            --x.m_size;
        }
    }
    
    void splice(const_iterator position, list<T,Allocator>&& x, const_iterator i) noexcept { splice(position, std::move(x), i); } //O(1)

    template <class Predicate> void remove_if(Predicate pred) {
        for (auto it = cbegin(); it != end();) {
            if (pred(*it))
                it = erase(it);
            else
                ++it;
        }
    }
    
    void remove(const T& value) {  
        remove_if([&value] (const T& other) { return other == value; } );
    }
    
    template <class BinaryPredicate>
    void unique(BinaryPredicate binary_pred) {
        if (m_size == 0) return;
        const_iterator last = begin();
        const_iterator current = std::next(last);
        while (current != end()) {
            if (binary_pred(*last, *current))
                current = erase(current);
            else
                last = current++;
        }
    }
    
    void unique() { unique(std::equal_to<const T&>()); }
    

    template <class Compare> void merge(list<T,Allocator>& x, Compare comp) {
        if (x.m_size == 0) {
            return;
        } else if (m_size == 0) {
            *this = std::move(x);
            return;
        } else {
            Node_base* current = &m_head;
            auto left = begin();
            auto right = x.begin();
            while (true) {
                if (comp(*right, *left)) { //think right > left, because left < right would make it not stable        
                    current->m_next = right.m_node;
                    right.m_node->m_previous = current;
                    current = right.m_node;
                    ++right;
                    if (right == x.end()) {
                        current->m_next = left.m_node;
                        left.m_node->m_previous = current;
                        break;                        
                    }
                                    
                } else {
                    current->m_next = left.m_node;
                    left.m_node->m_previous = current;
                    current = left.m_node;
                    ++left;
                    if (left == end()) {
                        current->m_next = right.m_node;
                        right.m_node->m_previous = current;
                        x.m_head.m_previous->m_next = &m_head;
                        m_head.m_previous = x.m_head.m_previous;
                        break;             
                    }          
                }
            }
            x.m_head.m_next = &x.m_head;
            x.m_head.m_previous = &x.m_head;
            m_size += x.m_size;
            x.m_size = 0;      
        }
    }

    template <class Compare> void merge(list<T,Allocator>&& x, Compare comp) { merge(std::move(x), comp); }   
    void merge(list<T,Allocator>& x) { merge(x, std::less<value_type>()); }
    void merge(list<T,Allocator>&& x) { merge(std::move(x)); }
    
    void reverse() noexcept {
        for (auto it = begin(); it != end(); --it) //can you figure out why I do --it
            std::swap(it.m_node->m_next, it.m_node->m_previous);
        std::swap(m_head.m_next, m_head.m_previous);
    }
    
    //i roughly benchmarked some things to see how different sorts perform on random data
    //10000000 els, class with trivial < operator that does integer comparison 
    //
    //pure mergesort:                                     7.68s, 220105099 compares
    //mergesort with insertionsort fallback (<64 el):     7.15s, 281557034 compares
    //timsort<5> adaptation (uses Tim's minrun [32 64])   6.32s, 284703579 compares
    //timsort<4> adaptation (uses smaller minrun [16 32]) 6.37s, 246085142 compares
    //timsort<3> adaptation (uses smaller minrun [8 16])  6.45s, 229316319 compares
    //gcc 4.8.1 default (libstd++)                        8.5s,  224003622 compares                       
    //
    //Note that the timsorts should perform vastly better on structured data with as little as size-1 compares
    //if the list is already sorted or reverse sorted
    
    void sort() { sort(std::less<const T&>()); }
    template <class Compare> void sort(Compare comp) {
        //mergesort(comp);
        timsort<Compare, 3>(comp);
    }

  private:

    //reverse function
    void reverse(iterator begin, iterator end) {
        auto before_begin = std::prev(begin);
    
        begin.m_node->m_previous->m_next = end.m_node->m_previous;
        end.m_node->m_previous = begin.m_node;
        begin.m_node->m_previous = end.m_node;

        for (; begin != end; --begin) //can you figure out why I do --it
            std::swap(begin.m_node->m_next, begin.m_node->m_previous);
        
        before_begin.m_node->m_next->m_previous = before_begin.m_node;
    }
  


    //timsort without galloping optimization (stable)
    //always wanted to try a timsort, see what all the fuss is about
    template <class Compare, int power_of_2 = 5> void timsort(Compare comp) {
        //base case, empty list or 1 element is always sorted
        if (size() < 2) return;
        
        const static size_type min_minrun = pow(2, power_of_2);
        if (m_size < min_minrun) {
            insertionsort(end(), ++begin(), end(), comp);
            return;
        }
        
        // minrun is chosen from the range 32 to 64 inclusive, such that the size of the array, divided by minrun, is equal to, or slightly smaller than, a power of two
        // <=>  minimize(log2(size/minrun) - y) | minrun, y member of Positive integers, minrun in [32 64], y > 0, log2(size/minrun) < y
        // pff sentence one on the wikipedia page translates into a heavily constrained optimization problem, I'm starting to disllike Tim
        
        // anyway, things are not that grim
        // since minrun is in the range (32, 64] <=> y in [ log2(size/64), log2(size/32) ]
        // <=> y in [ log2(size) - log2(64), log2(size) - log2(32) ]
        // <=> y in [ log2(size) - 6, log2(size) - 5 ]
        // we see that the range is only 1 in size, so contains only 1 (well techincally 2 if log2(size) is exactly 32 or 64)
        // so y is a lot more constrained than we thought, it is exactly std::floor(-5+log2(size))
        // now with y known minimize(log2(size/minrun) - y) becomes a whole lot easier
        // if minrun wasn't contrained to an integer the solution would be log2(size/minrun) - y = 0 <=> minrun = size()/2^y
        // So the integer solutions are minrun = floor(size()/2^y) v minrun = ceil(size()/2^y)
        // but floor(size()/2^y) would violate log2(size/minrun) < y, so the only possible solution is minrun = ceil(size()/2^y)
        // so in code:
        
        size_type minrun = std::ceil(size()/std::pow(2, -power_of_2+std::floor(std::log2(size()))));

        //I've taken a look at how Tim implemented it, he uses some bit shifting, not sure which would be faster
        //neither will make much of an impact though 
        
        list<list<T,Allocator> > merge_stack;        
        iterator last, current = begin();

        do { //we already know we have at least minrun els as we checked at the beginning
            size_type run_size = 1;
            last = current++;
                 
            if (comp(*last, *current)) {
                last = current++, ++run_size;
                while ((current != end()) && comp(*last, *current))
                    last = current++, ++run_size;
            } else {
                last = current++, ++run_size;
                while ((current != end()) && !comp(*last, *current))
                    last = current++, ++run_size;
                reverse(begin(), current);
            }
            
            //extend the run to minrun
            if (run_size < minrun) {
                size_type items_to_add = minrun-run_size;
                auto hint = current; //everything before hint is already sorted
                std::advance(current, items_to_add);
                run_size += items_to_add;
                insertionsort(end(), hint, current, comp); //sort the part of the run that's not sorted       
            } 

            //create this run as a new list on the stack
            merge_stack.emplace_front();
            
            //splice the nodes out
            //splice(merge_stack.front().begin(), *this, begin(), current) would start counting nodes to determine the size, so we use these 3 lines instead
            merge_stack.front().splice_range(merge_stack.front().begin(), begin(), current);            
            m_size -= run_size;
            merge_stack.front().m_size = run_size;

            //collapse stacks
            while (merge_stack.size() > 1) {
                auto first = merge_stack.begin();
                auto second = std::next(first);
                auto third = std::next(second); //at worst the end iterator
                if (third != merge_stack.end() && third->size() <= first->size() + second->size()) {
                    third->merge(*second);
                    merge_stack.erase(second);                    
                } else if (second->size() <= first->size()) {
                    second->merge(*first);
                    merge_stack.pop_front();
                } else {
                    break;
                }
            } 
                                  
        } while (m_size >= minrun);
        
        //sort whatever is still in *this (<minrun) and merge it with the top of the stack
        if (m_size > 1) {
            insertionsort(end(), ++begin(), end(), comp); //end is equivalent to before_begin        
        }
        merge_stack.begin()->merge(*this);
      
        //fully collapse to 1 stack
        while (merge_stack.size() > 1) {
            auto top = merge_stack.begin();
            auto second = std::next(top);
            second->merge(*top);
            merge_stack.pop_front();
        }

        *this = std::move(merge_stack.front());
    }

    //insertion sort (stable), requirements range has 2 or more elements
    template <class Compare> void insertionsort(iterator before_begin, iterator first_unsorted_item, iterator last, Compare comp) {
        for (auto i = first_unsorted_item; i != last;) {
            iterator j(std::prev(i)); 
            if (!comp(*i, *j)) { //optimization, can be left out
                ++i; 
                continue;
            } else {
              --j;
            }                                 
            while (j != before_begin && comp(*i, *j)) --j; //make j point to the largest element strictly smaller than *i

            auto tmp = std::next(i);
            splice_node(++j, i); //insert the node after j
            i = tmp;
        }
    }
 
    //recursive mergesort (stable)
    template <class Compare> void mergesort(Compare comp) {
        //base case, empty list or 1 element is always sorted
        if (size() < 2) return;
        
        //remove these 4 lines to disable insertionsort fallback
        if (size() < 64) {
            insertionsort(end(), ++begin(), end(), comp); //end() is equivalent to before_begin
            return;
        }

        //we cut the list in half
        auto half = begin();
        for (size_type i = 0; i < size()/2.0-1; ++i) ++half;
        list<T,Allocator> list2;
        list2.m_head.m_next = half.m_node->m_next;
        list2.m_head.m_previous = m_head.m_previous;     
        m_head.m_previous->m_next = &list2.m_head;
        half.m_node->m_next->m_previous = &list2.m_head;   
        half.m_node->m_next = &m_head;
        m_head.m_previous = half.m_node;        
        list2.m_size = std::floor(size()/2.0);
        m_size = std::ceil(size()/2.0);

        //sort the halves
        mergesort(comp);
        list2.mergesort(comp);

        //merge the halves
        merge(list2);
    }
    
};


template <class T, class Allocator>
bool operator==(const list<T,Allocator>& x, const list<T,Allocator>& y) {
    if (x.size() != y.size()) return false;
    for (auto it1 = x.cbegin(), it2 = y.cbegin(); it1 != x.cend(); ++it1, ++it2)
        if (*it1 != *it2)
            return false;
    return true;
}

template <class T, class Allocator>
bool operator< (const list<T,Allocator>& x, const list<T,Allocator>& y) {
    return lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
}

template <class T, class Allocator>
bool operator!=(const list<T,Allocator>& x, const list<T,Allocator>& y) {
    return !(x == y);
}

template <class T, class Allocator>
bool operator> (const list<T,Allocator>& x, const list<T,Allocator>& y) {
    return lexicographical_compare(y.begin(), y.end(), x.begin(), x.end());
}

template <class T, class Allocator>
bool operator>=(const list<T,Allocator>& x, const list<T,Allocator>& y) {
    return !(x < y);
}

template <class T, class Allocator>
bool operator<=(const list<T,Allocator>& x, const list<T,Allocator>& y) {
    return !(x > y);
}

// specialized algorithms:
template <class T, class Allocator>
void swap(list<T,Allocator>& x, list<T,Allocator>& y) {
    x.swap(y);
}

} //end namespace std

#endif //STL_LIST_H

#ifndef STL_FORWARD_LIST_H
#define STL_FORWARD_LIST_H

#include <memory>
#include <functional>
#include <cmath>
#include <iterator>
#include <initializer_list>

namespace std {


namespace details {
    class Forward_list_node_base {
      public:
        Forward_list_node_base* m_next;
    };
    
    template <class T>
    class Forward_list_node : public Forward_list_node_base {
      public:
        template <class... Args>
        Forward_list_node(Forward_list_node_base* next, Args&&... args) : Forward_list_node_base{next}, m_value(std::forward<Args&&>(args)...) {}
        T m_value;
    };
}


template <class T, class Allocator = allocator<T> >
class forward_list : private allocator_traits<Allocator>::template rebind_alloc<details::Forward_list_node<T>> {

    //The allocator is a private base class of forward_list to abuse empty base class optimization
    typedef typename allocator_traits<Allocator>::template rebind_alloc<details::Forward_list_node<T>> _allocator_type;

    typedef details::Forward_list_node_base Node_base;
    typedef details::Forward_list_node<T> Node;
    Node_base m_head;

    template <class U> //U is either T or const T depending on if this is a non-const or const iterator
    class forward_list_iterator : public std::iterator<std::forward_iterator_tag, U> {
        public:
            typedef size_t size_type;
            typedef ptrdiff_t difference_type;
        
            forward_list_iterator() = default;
            forward_list_iterator(const forward_list_iterator<T>& x) : m_node(x.m_node) {}
            forward_list_iterator(forward_list_iterator<T>&& x) : m_node(std::move(x.m_node)) {}
            forward_list_iterator<U>& operator= (const forward_list_iterator<T>& x) { m_node = x.m_node; return *this; }
        
        private:
            friend forward_list;
            explicit forward_list_iterator(const Node_base* node) : m_node(const_cast<Node_base*>(node)) {} //I do feel a little dirty,
                //but formally promise not to change the el I'm pointing to if iterator is const
            Node_base* m_node;
            
        public:
            bool operator==(const forward_list_iterator<T>& other) const {
                return m_node == other.m_node;
            }
            bool operator==(const forward_list_iterator<const T>& other) const {
                return m_node == other.m_node;
            }
            bool operator!=(const forward_list_iterator<T>& other) const {
                return !(*this == other);
            }
            bool operator!=(const forward_list_iterator<const T>& other) const {
                return !(*this == other);
            }
            forward_list_iterator<U>& operator++() {
                m_node = m_node->m_next;
                return *this;
            }
            forward_list_iterator<U> operator++(int) {
                forward_list_iterator<U> current(*this);
                m_node = m_node->m_next;
                return current;
            }
            U& operator* () const { return static_cast<Node*>(m_node)->m_value; }
            U* operator-> () const { return &static_cast<Node*>(m_node)->m_value; }
    };

public:
    // types:
    typedef T value_type;
    typedef value_type& reference;
    typedef const value_type& const_reference;
    typedef forward_list_iterator<T> iterator; // See 23.2
    typedef forward_list_iterator<const T> const_iterator; // See 23.2
    typedef typename forward_list_iterator<T>::size_type size_type; // See 23.2
    typedef typename forward_list_iterator<T>::difference_type difference_type; // See 23.2
    typedef Allocator allocator_type;
    typedef typename allocator_traits<Allocator>::pointer pointer;
    typedef typename allocator_traits<Allocator>::const_pointer const_pointer;

private:

    template <class... Args>  
    inline void _construct(Node* const & dest, Args&&... args) {
         allocator_traits<_allocator_type>::construct(*this, &*dest, std::forward<Args>(args)...);
    }

    inline void _destroy(Node* const & dest) {
        allocator_traits<_allocator_type>::destroy(*this, &*dest);
    }

    inline void _move_assign_allocator(forward_list&& x, true_type) { *static_cast<_allocator_type*>(this) = move(x); }
    inline void _move_assign_allocator(forward_list&& x, false_type) {}    
    
    inline void _copy_assign_allocator(const forward_list& x, true_type){ *static_cast<_allocator_type*>(this) = x; }
    inline void _copy_assign_allocator(const forward_list& x, false_type) {}

    inline void _swap_allocators(forward_list& x, true_type) { std::swap(*static_cast<_allocator_type*>(this), *static_cast<allocator_type*>(&x)); }
    inline void _swap_allocators(forward_list& x, false_type) {}


public:
// 23.3.4.2, construct/copy/destroy:
    explicit forward_list() noexcept : m_head{nullptr} {}

    explicit forward_list(const Allocator& alloc) : _allocator_type(alloc), m_head{nullptr} {}
    
    explicit forward_list(size_type n) : forward_list(Allocator()) {
        for (size_type i = 0; i < n; ++i) 
            emplace_front();
    }
    
    forward_list(size_type n, const T& value, const Allocator& alloc = Allocator()) : forward_list(alloc) {
        for (size_type i = 0; i < n; ++i) 
            emplace_front(value);
    }
    
    template <class InputIterator>
    forward_list(InputIterator first, InputIterator last, const Allocator& alloc = Allocator()) : forward_list(alloc) {
        iterator current = before_begin();
        for (auto it = first; it != last; ++it)
            current = emplace_after(current, *it);
    }
    
    forward_list(const forward_list& x, const Allocator& alloc) : forward_list(x.begin(), x.end(), alloc) {}
    forward_list(const forward_list& x) : forward_list(x, allocator_traits<allocator_type>::select_on_container_copy_construction(x.get_allocator())) {}    
    forward_list(forward_list&& x, const Allocator& alloc) noexcept : _allocator_type(alloc), m_head(x.m_head) { x.m_head.m_next = nullptr; } 
    forward_list(forward_list&& x) noexcept : _allocator_type(move(x.get_allocator())), m_head(x.m_head) { x.m_head.m_next = nullptr; } 
    forward_list(initializer_list<T> x, const Allocator& alloc = Allocator()) : forward_list(x.begin(), x.end(), alloc) {}
    ~forward_list() { clear(); }

    template <class InputIterator>
    void assign(InputIterator first, InputIterator last) {
        auto before_dest = before_begin(), dest = begin();
        while (first != last && dest != end()) { //copy
            *dest++ = *first++;
            ++before_dest;
        }
        while (first != last) //append
            before_dest = emplace_after(before_dest, *first++);
        erase_after(before_dest, end()); //erase trailing data
    }

    void assign(size_type n, const T& t) {
        auto before_dest = before_begin(), dest = begin();
        size_type i; 
        for (i = 0; dest != end() && i < n; ++i) { //copy
            *dest++ = t;
            ++before_dest;
        }
        for (; i < n; ++i) //append
            before_dest = emplace_after(before_dest, t);
        erase_after(before_dest, end()); //erase trailing data
    }

    void assign(initializer_list<T> x) { assign(x.begin(), x.end()); }
    
    forward_list<T,Allocator>& operator=(const forward_list<T,Allocator>& x) noexcept { 
        _copy_assign_allocator(x, integral_constant<bool, allocator_traits<allocator_type>::propagate_on_container_copy_assignment::value>());
        assign(x.begin(), x.end()); 
        return *this;
    }
    
    forward_list& operator=(initializer_list<T> x) { 
        assign(x.begin(), x.end()); 
        return *this;
    }
    
    forward_list<T,Allocator>& operator=(forward_list<T,Allocator>&& x) noexcept {
        clear();
        
        _move_assign_allocator(move(x), integral_constant<bool, allocator_traits<allocator_type>::propagate_on_container_move_assignment::value>());
        
        m_head = x.m_head; 
        x.m_head.m_next = nullptr;
        return *this;
    }
    
    allocator_type get_allocator() const noexcept { return *this; }

// 23.3.4.3, iterators:
    iterator before_begin() noexcept { return iterator(&m_head); }
    const_iterator before_begin() const noexcept { return const_iterator(&m_head); }
    iterator begin() noexcept { return iterator(m_head.m_next); }
    const_iterator begin() const noexcept { return const_iterator(m_head.m_next); }
    iterator end() noexcept { return iterator(nullptr); }
    const_iterator end() const noexcept { return const_iterator(nullptr); }
    const_iterator cbegin() const noexcept { return const_iterator(m_head.m_next); }
    const_iterator cbefore_begin() const noexcept { return const_iterator(&m_head); }
    const_iterator cend() const noexcept { return const_iterator(nullptr); }
    
// capacity:
    bool empty() const noexcept { return m_head.m_next == nullptr; }
    size_type max_size() const noexcept { return size_type(-1); }
    
// 23.3.4.4, element access:
    reference front() { return *begin(); }
    const_reference front() const { return *cbegin(); }
    
// 23.3.4.5, modifiers:
    template <class... Args> void emplace_front(Args&&... args) {
        Node* node = this->allocate(1, m_head.m_next);
        try {
            _construct(node, m_head.m_next, std::forward<Args&&>(args)...);
        } catch(...) {
            this->deallocate(node, 1);
            throw;
        }
        m_head.m_next = node;
    }
    
    void push_front(const T& x) { emplace_front(x); }
    void push_front(T&& x) { emplace_front(std::move(x)); }
    
    void pop_front() {
        Node* node = static_cast<Node*>(m_head.m_next);
        m_head.m_next = node->m_next;
        _destroy(node);
        this->deallocate(node, 1);
    }
    
// 23.3.4.1
    template <class... Args> iterator emplace_after(const_iterator position, Args&&... args) {
        Node* node = this->allocate(1, position.m_node);
        try {
            _construct(node, position.m_node->m_next, std::forward<Args&&>(args)...);
        } catch(...) {
            this->deallocate(node, 1);
            throw;
        }
        position.m_node->m_next = node;
        return iterator(node);
    }
    
    iterator insert_after(const_iterator position, const T& x) { return emplace_after(position, x); }
    iterator insert_after(const_iterator position, T&& x) { return emplace_after(position, std::move(x)); }
    iterator insert_after(const_iterator position, size_type n, const T& x) {
        for (size_type i = 0; i < n; ++i)
            position = emplace_after(position, x);
        return position;
    }
    
    template <class InputIterator>
    iterator insert_after(const_iterator position, InputIterator first, InputIterator last) {
        for (auto it = first; it != last; ++it)
            position = emplace_after(position, *it);
        return position;
    }
    
    iterator insert_after(const_iterator position, initializer_list<T> il) { return insert_after(position, il.begin(), il.end()); }

    iterator erase_after(const_iterator position, iterator last) noexcept {
        Node_base* original_position = position.m_node;
        ++position;
        
        //close the list
        original_position->m_next = last.m_node;

        //free the nodes
        while (position != last) {
            Node* current_node = static_cast<Node*>(position.m_node);
            ++position;
            _destroy(current_node);
            this->deallocate(current_node, 1);
        }
        return last;
    }

    iterator erase_after(const_iterator position) noexcept { 
        Node* node_to_erase = static_cast<Node*>(position.m_node->m_next);
 
        //close the list
        position.m_node->m_next = node_to_erase->m_next;
        
        //free the node
        _destroy(node_to_erase);
        this->deallocate(node_to_erase, 1);
        
        return iterator(position.m_node->m_next);
    }
      
    void swap(forward_list<T,Allocator>& x) noexcept {
        _swap_allocators(x, integral_constant<bool, allocator_traits<allocator_type>::propagate_on_container_swap::value>());
        std::swap(m_head, x.m_head);
    }
    
    void resize(size_type sz) {
        size_type i = 0;
        const_iterator last = before_begin();
        const_iterator it = begin();
        for (; i < sz && it != end() ;++i, ++last, ++it); //cycle through
        for (; i < sz; ++i) //add nodes as required
            last = emplace_after(last);
        erase_after(last, end()); //remove nodes as required
    }
    
    void resize(size_type sz, const value_type& c) {
        size_type i = 0;
        const_iterator last = before_begin();
        const_iterator it = begin();
        for (; i < sz && it != end() ;++i, ++last, ++it); //cycle through
        for (; i < sz; ++i) //add nodes as required
            last = emplace_after(last, c);
        erase_after(last, end()); //remove nodes as required
    }
    
    void clear() noexcept { erase_after(before_begin(), end()); }

// 23.3.4.6, forward_list operations:
    void splice_after(const_iterator position, forward_list<T,Allocator>& x) {
        //find the second to last element
        const_iterator second_to_last = x.before_begin();
        while (second_to_last.m_node->m_next != nullptr) ++second_to_last;
        
        //find the second to last element
        second_to_last.m_node->m_next = position.m_node->m_next;
        position.m_node->m_next = x.m_head.m_next;

        //fix the other container        
        x.m_head.m_next = nullptr;
    }

    void splice_after(const_iterator position, forward_list<T,Allocator>& x, const_iterator first, const_iterator last) {
        if (first == last) return;
    
        //find the second to last element
        const_iterator second_to_last = first;
        while (second_to_last.m_node->m_next != last.m_node) ++second_to_last;
        
        //do the actual splice
        second_to_last.m_node->m_next = position.m_node->m_next;
        position.m_node->m_next = first.m_node->m_next;
        
        //fix the other container
        first.m_node->m_next = last.m_node;
        
        //here I am left wondering why i need x exactly. (first, last) is required to be a valid range, that should
        //be enought right ?
    }
    
    void splice_after(const_iterator position, forward_list<T,Allocator>& x, const_iterator i) {
        if (i.m_node->m_next == nullptr) return;

        auto node_to_splice = i.m_node->m_next;
        
        //skip it in the old list
        i.m_node->m_next = i.m_node->m_next->m_next;
        
        //insert it in the new list
        node_to_splice->m_next = position.m_node->m_next;
        position.m_node->m_next = node_to_splice;
    }
    
    void splice_after(const_iterator position, forward_list<T,Allocator>&& x, const_iterator first, const_iterator last) { splice_after(position, std::move(x), first, last); }
    void splice_after(const_iterator position, forward_list<T,Allocator>&& x) noexcept { splice_after(position, std::move(x)); }
    void splice_after(const_iterator position, forward_list<T,Allocator>&& x, const_iterator i) noexcept { splice_after(position, std::move(x), i); }

    template <class Predicate> void remove_if(Predicate pred) {
        const_iterator last = before_begin();
        const_iterator current = begin();
        while (current != end()) {
            if (pred(*current)) {
                current = erase_after(last);
            } else {
                last = current;
                ++current;
            }
        }
        
    }  

    void debug() {
        std::cout << "head: address(" << &m_head<< ") next(" << m_head.m_next << ")" << std::endl;
        for (auto it = begin(); it != end(); ++it) {
            Node* node = static_cast<Node*>(it.m_node);
            std::cout << "node: value(" << node->m_value << ") address(" << node << ") next(" << node->m_next << ")" << std::endl;
        }
        std::cout << std::endl;
    }

    void remove(const T& value) {
        remove_if([&value] (const T& other) { return other == value; } );
    }    
      
    template <class BinaryPredicate> void unique(BinaryPredicate binary_pred) {
        if (begin() == end()) return;
        const_iterator last = begin();
        const_iterator current = std::next(last);
        while (current != end()) {
            if (binary_pred(*last, *current))
                current = erase_after(last);
            else
                last = current++;
        }
    }
    
    void unique() { unique(std::equal_to<const T&>()); }
    
    template <class Compare> void merge(forward_list<T,Allocator>& x, Compare comp) {    
        //this algorithm is very similar to the one in list, if you change this
        //give the other one some love too
          
        Node_base* current = &m_head;
        Node_base* left = m_head.m_next;
        Node_base*& right = x.m_head.m_next;
        
        if (right == nullptr) {
            return;
        } else if (left == nullptr) {
            current->m_next = right;
        } else {
            while (true) {
                if (comp(static_cast<Node*>(right)->m_value, static_cast<Node*>(left)->m_value)) { //think right > left, because left < right would make it not stable
                    current->m_next = right;
                    current = right;
                    right = right->m_next;
                    if (right == nullptr) {
                        current->m_next = left;
                        break;
                    }
                } else {
                    current->m_next = left;
                    current = left;
                    left = left->m_next;
                    if (left == nullptr) {
                        current->m_next = right;
                        break;
                    }
                }
            }
        }
        x.m_head.m_next = nullptr;
    }
    
    template <class Compare> void merge(forward_list<T,Allocator>&& x, Compare comp) { merge(std::move(x), comp); }   
    void merge(forward_list<T,Allocator>& x) { merge(x, std::less<value_type>()); }
    void merge(forward_list<T,Allocator>&& x) { merge(std::move(x)); }
    
private:
    //recursive mergesort (stable)
    template <class Compare> void mergesort(const size_type& size, Compare comp) {
        //base case, empty list or 1 element is always sorted
        if (empty() || m_head.m_next->m_next == nullptr) return;

        //we cut the list in half
        auto half = begin();
        for (size_type i = 0; i < size/2.0-1; ++i) ++half;
        forward_list<T,Allocator> list2;
        list2.m_head.m_next = half.m_node->m_next;
        half.m_node->m_next = nullptr;
        
        //sort the halves
        mergesort(std::ceil(size/2.0), comp);
        list2.mergesort(std::floor(size/2.0), comp);

        //merge the halves
        merge(list2);
    }

    //timsort without galloping optimization (stable)
    //always wanted to try a timsort, see what all the fuss is about
    template <class Compare, int power_of_2 = 5> void timsort(Compare comp) {
        //base case, empty list or 1 element is always sorted
        if (empty() || m_head.m_next->m_next == nullptr) return;
        
        size_type size = std::distance(begin(), end());
        
        const static size_type min_minrun = pow(2, power_of_2);
        if (size < min_minrun) {
            insertionsort(before_begin(), begin(), end(), comp);
            return;
        }
        
        // minrun is chosen from the range 32 to 64 inclusive, such that the size of the array, divided by minrun, is equal to, or slightly smaller than, a power of two
        // <=>  minimize(log2(size/minrun) - y) | minrun, y member of Positive integers, minrun in [32 64], y > 0, log2(size/minrun) < y
        // pff sentence one on the wikipedia page translates into a heavily constrained optimization problem, I'm starting to disllike Tim
        
        // anyway, things are not that grim
        // since minrun is in the range (32, 64] <=> y in [ log2(size/64), log2(size/32) ]
        // <=> y in [ log2(size) - log2(64), log2(size) - log2(32) ]
        // <=> y in [ log2(size) - 6, log2(size) - 5 ]
        // we see that the range is only 1 in size, so contains only 1 (well techincally 2 if log2(size) is exactly 32 or 64)
        // so y is a lot more constrained than we thought, it is exactly std::floor(-5+log2(size))
        // now with y known minimize(log2(size/minrun) - y) becomes a whole lot easier
        // if minrun wasn't contrained to an integer the solution would be log2(size/minrun) - y = 0 <=> minrun = size()/2^y
        // So the integer solutions are minrun = floor(size()/2^y) v minrun = ceil(size()/2^y)
        // but floor(size()/2^y) would violate log2(size/minrun) < y, so the only possible solution is minrun = ceil(size()/2^y)
        // so in code:
        
        size_type minrun = std::ceil(size/std::pow(2, -power_of_2+std::floor(std::log2(size))));

        //I've taken a look at how Tim implemented it, he uses some bit shifting, not sure which would be faster
        //neither will make much of an impact though 
        
        forward_list<std::pair<forward_list<T,Allocator>, size_type> > merge_stack;        
        iterator last, current = begin();

        do {
            size_type run_size = 1;
            last = current++;
                 
            if (comp(*last, *current)) {
                last = current++, ++run_size;
                while ((current != end()) && comp(*last, *current))
                    last = current++, ++run_size;
            } else {
                last = current++, ++run_size;
                while ((current != end()) && !comp(*last, *current))
                    last = current++, ++run_size;
                reverse(before_begin(), begin(), current);
                last = begin();
            }
            
            //extend the run to minrun
            if (run_size < minrun) {
                size_type items_to_add = minrun-run_size;
                auto hint = last; //everything before hint is already sorted
                std::advance(current, items_to_add);
                run_size += items_to_add;
                insertionsort(before_begin(), hint, current, comp); //sort the part of the run that's not sorted       
            } 

            //create this run as a new list on the stack
            merge_stack.emplace_front();
            
            //splice the nodes out
            //splice(merge_stack.front().begin(), *this, begin(), current) would start counting nodes to determine the size, so we use these 3 lines instead
            merge_stack.front().first.splice_after(merge_stack.front().first.before_begin(), *this, before_begin(), current);            
            merge_stack.front().second = run_size;
            size -= run_size;

            //collapse stacks
            while (!merge_stack.empty() && ++merge_stack.begin() != merge_stack.end()) { //size > 1
                auto first = merge_stack.begin();
                auto second = std::next(first);
                auto third = std::next(second); //at worst the end iterator
                if (third != merge_stack.end() && third->second <= first->second + second->second) {
                    third->first.merge(second->first);
                    third->second += second->second; //update size
                    merge_stack.erase_after(first);         
                } else if (second->second <= first->second) {
                    second->first.merge(first->first);
                    second->second += first->second; //update size
                    merge_stack.pop_front();
                } else {
                    break;
                }
            } 
        } while (size >= minrun);
        
        //sort whatever is still in *this (<minrun) and merge it with the top of the stack
        if (size > 1) {
            insertionsort(before_begin(), begin(), end(), comp); //end is equivalent to before_begin        
        }
        merge_stack.begin()->first.merge(*this);
               
        //fully collapse to 1 stack
        while (!merge_stack.empty() && ++merge_stack.begin() != merge_stack.end()) {  //size > 1
            auto top = merge_stack.begin();
            auto second = std::next(top);
            second->first.merge(top->first);
            merge_stack.pop_front();
        }

        *this = std::move(merge_stack.front().first);
    }

    //insertion sort (stable), only for valid ranges with size >= 2
    template <class Compare> void insertionsort(iterator before_begin, iterator last_sorted_item, iterator end, Compare comp) {
        for (auto i = std::next(last_sorted_item); i != end;) {
            if (!comp(*i, *last_sorted_item)) { //optimization, can be left out
                last_sorted_item = i++;
                continue;
            }
            iterator j;
            for (j = before_begin; j != end && !comp(*i, *std::next(j)); ++j); //make j point to the largest element strictly smaller than *i
            splice_after(j, *this, last_sorted_item); //insert the node after j
            i = std::next(last_sorted_item);
        }
    }
    
    //reverse function (stable)
    void reverse(iterator before_begin, iterator begin, iterator end) {
        Node_base* last = end.m_node;
        Node_base* current = begin.m_node;
        while (current != end.m_node) {
            auto next = current->m_next;
            current->m_next = last;
            last = current;
            current = next;        
        }
        before_begin.m_node->m_next = last;
    }
    
public:    
    
    template <class Compare> void sort(Compare comp) {
        //mergesort(std::distance(begin(), end()), comp);
        timsort<Compare, 3>(comp);
        //TODO: Is mergesort the best approach ?
        //TODO: even if we settle on mergesort, the current implementation does 
        //a lot of work to find the midpoint (n + (nlogn)/2) iterations approx
        //it's hard to avoid but we could mitigate the damage by increasing the 
        //number of partitions/iteration (increase that 2) or tabling midpoints
    }
    
    void sort() { sort(std::less<const T&>()); }
    
    void reverse() noexcept {
        Node_base* last = nullptr;
        Node_base* current = m_head.m_next;
        while (current != nullptr) {
            auto next = current->m_next;
            current->m_next = last;
            last = current;
            current = next;
        }
        m_head.m_next = last;
    }
};

// Comparison operators
template <class T, class Allocator>
bool operator==(const forward_list<T,Allocator>& x, const forward_list<T,Allocator>& y) {
    auto it1 = x.cbegin(), it2 = y.cbegin();
    for (; it1 != x.cend() && it2 != y.cend(); ++it1, ++it2) {
        if (*it1 != *it2) return false;
    }
    return (it1 == x.cend() && it2 == y.cend()); //they are both at the end
}

template <class T, class Allocator>
bool operator!=(const forward_list<T,Allocator>& x, const forward_list<T,Allocator>& y) {
    return !(x == y);
}


// 23.3.4.1
template <class T, class Allocator>
bool operator< (const forward_list<T,Allocator>& x, const forward_list<T,Allocator>& y) {
    return lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
}
template <class T, class Allocator>
bool operator> (const forward_list<T,Allocator>& x, const forward_list<T,Allocator>& y) {
    return lexicographical_compare(y.begin(), y.end(), x.begin(), x.end());
}
template <class T, class Allocator>
bool operator>=(const forward_list<T,Allocator>& x, const forward_list<T,Allocator>& y) {
    return !(x < y);
}
template <class T, class Allocator>
bool operator<=(const forward_list<T,Allocator>& x, const forward_list<T,Allocator>& y) {
    return !(x > y);
}

// 23.3.4.7, specialized algorithms:
template <class T, class Allocator>
void swap(forward_list<T,Allocator>& x, forward_list<T,Allocator>& y) noexcept( noexcept( x.swap(y) ) ) {
    x.swap(y);
}

} //end namespace std

#endif //STL_FORWARD_LIST_H

